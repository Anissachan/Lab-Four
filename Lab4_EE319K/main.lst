


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Anissa Chan and Pragna Subrahmanya
                       
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 1/18/2019
    5 00000000         ; You are given a simple stepper motor software system w
                       ith one input and
    6 00000000         ; four outputs. This program runs, but you are asked to 
                       add minimally intrusive
    7 00000000         ; debugging instruments to verify it is running properly
                       . 
    8 00000000         ;   If the input PA4 is low, the stepper motor outputs c
                       ycle 10,6,5,9,...
    9 00000000         ;   If the input PA4 is high, the stepper motor outputs 
                       cycle 5,6,10,9,...
   10 00000000         ;   Insert debugging instruments which gather data (stat
                       e and timing)
   11 00000000         ;   to verify that the system is functioning as expected
                       .
   12 00000000         ; Hardware connections (External: One button and four ou
                       tputs to stepper motor)
   13 00000000         ;  PA4 is Button input  (1 means pressed, 0 means not pr
                       essed)
   14 00000000         ;  PE3-0 are stepper motor outputs 
   15 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   16 00000000         ; Instrumentation data to be gathered is as follows:
   17 00000000         ; After every output to Port E, collect one state and ti
                       me entry. 
   18 00000000         ; The state information is the 5 bits on Port A bit 4 an
                       d Port E PE3-0
   19 00000000         ;   place one 8-bit entry in your Data Buffer  
   20 00000000         ; The time information is the 24-bit time difference bet
                       ween this output and the previous (in 12.5ns units)
   21 00000000         ;   place one 32-bit entry in the Time Buffer
   22 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   23 00000000         ;    you must handle the roll over as Current goes 3,2,1
                       ,0,0x00FFFFFF,0xFFFFFE,
   24 00000000         ; Note: The size of both buffers is 100 entries. Once yo
                       u fill these
   25 00000000         ;       entries you should stop collecting data
   26 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   27 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   28 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   29 00000000         
   30 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   31 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   32 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   33 00000000 40004400 
                       GPIO_PORTA_DIR_R



ARM Macro Assembler    Page 2 


                               EQU              0x40004400
   34 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   35 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   36 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   37 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   38 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   39 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000         
   42 00000000         ; RAM Area
   43 00000000                 AREA             DATA, ALIGN=2
   44 00000000 00 00 00 
              00       Index   SPACE            4           ; index into Steppe
                                                            r table 0,1,2,3
   45 00000004 00 00 00 
              00       Direction
                               SPACE            4           ; -1 for CCW, 0 for
                                                             stop 1 for CW
   46 00000008         
   47 00000008         ;place your debug variables in RAM here
   48 00000008 00 00 00 
              00       CNT     SPACE            4
   49 0000000C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       DataBuffer
                               SPACE            100
   50 00000070 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       TimeBuffer
                               SPACE            100
   51 000000D4 00 00 00 
              00       DataPt  SPACE            4
   52 000000D8 00 00 00 
              00       TimePt  SPACE            4
   53 000000DC 00 00 00 
              00       LastTime
                               SPACE            4
   54 000000E0         
   55 000000E0         ; ROM Area
   56 000000E0                 IMPORT           TExaS_Init
   57 000000E0                 IMPORT           SysTick_Init
   58 000000E0         ;-UUU-Import routine(s) from other assembly files (like 



ARM Macro Assembler    Page 4 


                       SysTick.s) here
   59 000000E0                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000 05 06 0A 
              09       Stepper DCB              5,6,10,9
   62 00000004 0000018F 
                       EndofBuffer
                               DCD              399
   63 00000008                 EXPORT           Start
   64 00000008         
   65 00000008         Start
   66 00000008         ; TExaS_Init sets bus clock at 80 MHz
   67 00000008         ; PA4, PE3-PE0 out logic analyzer to TExasDisplay
   68 00000008 4871            LDR              R0,=SendDataToLogicAnalyzer
   69 0000000A F040 0001       ORR              R0,R0,#1
   70 0000000E F7FF FFFE       BL               TExaS_Init  ; logic analyzer, 8
                                                            0 MHz
   71 00000012         ;place your initializations here
   72 00000012 4870            LDR              R0, =SYSCTL_RCGCGPIO_R
   73 00000014 6801            LDR              R1, [R0]
   74 00000016 F041 0120       ORR              R1, #0x20
   75 0000001A 6001            STR              R1, [R0]
   76 0000001C         
   77 0000001C BF00            NOP
   78 0000001E BF00            NOP
   79 00000020 BF00            NOP
   80 00000022 BF00            NOP
   81 00000024         
   82 00000024         
   83 00000024 486C            LDR              R0, = GPIO_PORTF_DIR_R
   84 00000026 6801            LDR              R1, [R0]
   85 00000028 F041 0104       ORR              R1, #0x04
   86 0000002C 6001            STR              R1, [R0]
   87 0000002E         
   88 0000002E 486B            LDR              R0, =GPIO_PORTF_DEN_R
   89 00000030 6801            LDR              R1, [R0]
   90 00000032 F041 0104       ORR              R1, #0x04
   91 00000036 6001            STR              R1, [R0]
   92 00000038         
   93 00000038 F000 F824       BL               Stepper_Init ; initialize stepp
                                                            er motor
   94 0000003C F000 F83C       BL               Switch_Init ; initialize switch
                                                             input
   95 00000040         ;**********************
   96 00000040 F000 F85F       BL               Debug_Init  ;(you write this)
   97 00000044         
   98 00000044         ;**********************
   99 00000044 B662            CPSIE            I           ; TExaS logic analy
                                                            zer runs on interru
                                                            pts
  100 00000046 F04F 0500       MOV              R5,#0       ; last PA4
  101 0000004A         loop
  102 0000004A         
  103 0000004A         ONLIGHT
  104 0000004A 4865            LDR              R0, =GPIO_PORTF_DATA_R
  105 0000004C 6801            LDR              R1, [R0]
  106 0000004E F081 0104       EOR              R1, #0x04
  107 00000052 6001            STR              R1, [R0]



ARM Macro Assembler    Page 5 


  108 00000054         
  109 00000054         
  110 00000054         ;AND R0, #0
  111 00000054         ;ADD R0, #0xF1
  112 00000054         ;dloop ;SUBS R0, #1
  113 00000054         ;CMP R0, #0
  114 00000054         ;BNE dloop
  115 00000054         
  116 00000054         
  117 00000054         ;OFFLIGHT
  118 00000054         ;LDR R0, =GPIO_PORTF_DATA_R
  119 00000054         ;LDR R1, [R0]
  120 00000054         ;EOR R1, #0x04
  121 00000054         ;STR R1, [R0]
  122 00000054         
  123 00000054 4963            LDR              R1,=GPIO_PORTA_DATA_R
  124 00000056 680C            LDR              R4,[R1]     ;current value of s
                                                            witch
  125 00000058 F004 0410       AND              R4,R4,#0x10 ; select just bit 4
                                                            
  126 0000005C 2C00            CMP              R4,#0
  127 0000005E D00A            BEQ              no          ; skip if not pushe
                                                            d
  128 00000060 2D00            CMP              R5,#0
  129 00000062 D108            BNE              no          ; skip if pushed la
                                                            st time
  130 00000064         ; this time yes, last time no
  131 00000064 4960            LDR              R1,=Direction
  132 00000066 6808            LDR              R0,[R1]     ; current direction
                                                            
  133 00000068 F100 0001       ADD              R0,R0,#1    ;-1,0,1 to 0,1,2
  134 0000006C 2802            CMP              R0,#2
  135 0000006E D101            BNE              ok
  136 00000070 F04F 30FF       MOV              R0,#-1      ; cycles through va
                                                            lues -1,0,1
  137 00000074 6008    ok      STR              R0,[R1]     ; Direction=0 (CW) 
                                                             
  138 00000076 4625    no      MOV              R5,R4       ; setup for next ti
                                                            me
  139 00000078 F000 F830       BL               Stepper_Step
  140 0000007C 485B            LDR              R0,=1600000
  141 0000007E F000 F83D       BL               Wait        ; time delay fixed 
                                                            but not accurate   
                                                            
  142 00000082 E7E2            B                loop
  143 00000084         ;Initialize stepper motor interface
  144 00000084         Stepper_Init
  145 00000084 F04F 0001       MOV              R0,#1
  146 00000088 4957            LDR              R1,=Direction
  147 0000008A 6008            STR              R0,[R1]     ; Direction=0 (CW)
  148 0000008C F04F 0000       MOV              R0,#0
  149 00000090 4957            LDR              R1,=Index
  150 00000092 6008            STR              R0,[R1]     ; Index=0
  151 00000094         ; activate clock for Port E
  152 00000094 494F            LDR              R1, =SYSCTL_RCGCGPIO_R
  153 00000096 6808            LDR              R0, [R1]
  154 00000098 F040 0010       ORR              R0, R0, #0x10 ; Clock for E
  155 0000009C 6008            STR              R0, [R1]
  156 0000009E BF00            NOP



ARM Macro Assembler    Page 6 


  157 000000A0 BF00            NOP                          ; allow time to fin
                                                            ish activating
  158 000000A2         ; set direction register
  159 000000A2 4954            LDR              R1, =GPIO_PORTE_DIR_R
  160 000000A4 6808            LDR              R0, [R1]
  161 000000A6 F040 000F       ORR              R0, R0, #0x0F 
                                                            ; Output on PE0-PE3
                                                            
  162 000000AA 6008            STR              R0, [R1]
  163 000000AC         ; enable digital port
  164 000000AC 4952            LDR              R1, =GPIO_PORTE_DEN_R
  165 000000AE 6808            LDR              R0, [R1]
  166 000000B0 F040 000F       ORR              R0, R0, #0x0F ; enable PE3-0
  167 000000B4 6008            STR              R0, [R1]
  168 000000B6 4770            BX               LR
  169 000000B8         ;Initialize switch interface
  170 000000B8         Switch_Init
  171 000000B8         ; activate clock for Port A
  172 000000B8 4946            LDR              R1, =SYSCTL_RCGCGPIO_R
  173 000000BA 6808            LDR              R0, [R1]
  174 000000BC F040 0001       ORR              R0, R0, #0x01 ; Clock for A
  175 000000C0 6008            STR              R0, [R1]
  176 000000C2 BF00            NOP
  177 000000C4 BF00            NOP                          ; allow time to fin
                                                            ish activating
  178 000000C6         ; set direction register
  179 000000C6 494D            LDR              R1, =GPIO_PORTA_DIR_R
  180 000000C8 6808            LDR              R0, [R1]
  181 000000CA F020 0010       BIC              R0, R0, #0x10 ; Input on PA4
  182 000000CE 6008            STR              R0, [R1]
  183 000000D0         ; 5) enable digital port
  184 000000D0 494B            LDR              R1, =GPIO_PORTA_DEN_R
  185 000000D2 6808            LDR              R0, [R1]
  186 000000D4 F040 0010       ORR              R0, R0, #0x10 ; enable PA4
  187 000000D8 6008            STR              R0, [R1]
  188 000000DA 4770            BX               LR
  189 000000DC         ; Step the motor clockwise
  190 000000DC         ; Direction determines the rotational direction
  191 000000DC         ; Input: None
  192 000000DC         ; Output: None
  193 000000DC         Stepper_Step
  194 000000DC B510            PUSH             {R4,LR}
  195 000000DE 4944            LDR              R1,=Index
  196 000000E0 680A            LDR              R2,[R1]     ; old Index
  197 000000E2 4B41            LDR              R3,=Direction
  198 000000E4 6818            LDR              R0,[R3]     ; -1 for CCW, 0 for
                                                             stop 1 for CW
  199 000000E6 4402            ADD              R2,R2,R0
  200 000000E8 F002 0203       AND              R2,R2,#3    ; 0,1,2,3,0,1,2,...
                                                            
  201 000000EC 600A            STR              R2,[R1]     ; new Index
  202 000000EE 4B45            LDR              R3,=Stepper ; table
  203 000000F0 5CD0            LDRB             R0,[R2,R3]  ; next output: 5,6,
                                                            10,9,5,6,10,...
  204 000000F2 4945            LDR              R1,=GPIO_PORTE_DATA_R 
                                                            ; change PE3-PE0
  205 000000F4 6008            STR              R0,[R1]
  206 000000F6 F000 F832       BL               Debug_Capture
  207 000000FA BD10            POP              {R4,PC}



ARM Macro Assembler    Page 7 


  208 000000FC         ; inaccurate and inefficient time delay
  209 000000FC         Wait
  210 000000FC 1E40            SUBS             R0,R0,#1    ; outer loop
  211 000000FE D1FD            BNE              Wait
  212 00000100 4770            BX               LR
  213 00000102         
  214 00000102         Debug_Init
  215 00000102 B51F            PUSH             {R0-R4,LR}
  216 00000104         ; you write this
  217 00000104 F002 0200       AND              R2, #0
  218 00000108         
  219 00000108 4840            LDR              R0, =DataBuffer ;initialising d
                                                            ata buffer
  220 0000010A 4B41            LDR              R3, =EndofBuffer
  221 0000010C 681C            LDR              R4, [R3]
  222 0000010E         
  223 0000010E         datainitloop
  224 0000010E 5881            LDR              R1, [R0, R2]
  225 00000110 F001 0100       AND              R1, #0
  226 00000114 F101 01FF       ADD              R1, #0xFF
  227 00000118 5081            STR              R1, [R0, R2]
  228 0000011A         
  229 0000011A F102 0201       ADD              R2, #1
  230 0000011E 2A63            CMP              R2, #99
  231 00000120 D1F5            BNE              datainitloop
  232 00000122         
  233 00000122 F002 0200       AND              R2, #0
  234 00000126         
  235 00000126 483B            LDR              R0, =TimeBuffer ;initialising t
                                                            ime buffer
  236 00000128         
  237 00000128         timeinitloop
  238 00000128 5881            LDR              R1, [R0, R2]
  239 0000012A F001 0100       AND              R1, #0
  240 0000012E F101 31FF       ADD              R1, #0xFFFFFFFF
  241 00000132 5081            STR              R1, [R0, R2]
  242 00000134         
  243 00000134 F102 0203       ADD              R2, #3
  244 00000138 42A2            CMP              R2, R4
  245 0000013A D1F5            BNE              timeinitloop
  246 0000013C         
  247 0000013C 4836            LDR              R0, =DataPt
  248 0000013E 6801            LDR              R1, [R0]
  249 00000140 F001 0100       AND              R1, #0
  250 00000144 4A31            LDR              R2, =DataBuffer
  251 00000146 4411            ADD              R1, R2
  252 00000148 6001            STR              R1, [R0]
  253 0000014A         
  254 0000014A 4834            LDR              R0, =TimePt
  255 0000014C 6801            LDR              R1, [R0]
  256 0000014E F001 0100       AND              R1, #0
  257 00000152 4A30            LDR              R2, =TimeBuffer
  258 00000154 4411            ADD              R1, R2
  259 00000156 6001            STR              R1, [R0]
  260 00000158         
  261 00000158 F7FF FFFE       BL               SysTick_Init
  262 0000015C BD1F            POP              {R0-R4,PC}
  263 0000015E         
  264 0000015E         ;Debug capture



ARM Macro Assembler    Page 8 


  265 0000015E         Debug_Capture
  266 0000015E B57F            PUSH             {R0-R6,LR}
  267 00000160         
  268 00000160 482E            LDR              R0, = TimePt
  269 00000162 6801            LDR              R1, [R0]
  270 00000164 4A2B            LDR              R2, = TimeBuffer
  271 00000166 F502 72C8       ADD              R2, #400
  272 0000016A 4291            CMP              R1, R2
  273 0000016C D024            BEQ              Return
  274 0000016E         
  275 0000016E 482A            LDR              R0, =DataPt
  276 00000170 6801            LDR              R1, [R0]
  277 00000172 4A26            LDR              R2, =DataBuffer
  278 00000174 F102 0264       ADD              R2, #100
  279 00000178 4291            CMP              R1, R2
  280 0000017A D01D            BEQ              Return
  281 0000017C         
  282 0000017C 4819            LDR              R0, =GPIO_PORTA_DATA_R 
                                                            ;reading PA4 bit
  283 0000017E 6801            LDR              R1, [R0]
  284 00000180 F001 0210       AND              R2, R1, #0x10
  285 00000184         
  286 00000184 4820            LDR              R0, =GPIO_PORTE_DATA_R 
                                                            ;reading PE0-3 bits
                                                            
  287 00000186 6801            LDR              R1, [R0]
  288 00000188 F001 030F       AND              R3, R1, #0x0F
  289 0000018C         
  290 0000018C 441A            ADD              R2, R2, R3  ;combining all the 
                                                            bits
  291 0000018E         
  292 0000018E 4822            LDR              R0, =DataPt
  293 00000190 6801            LDR              R1, [R0]
  294 00000192         
  295 00000192 700A            STRB             R2, [R1]    ;dumping data into 
                                                            DataBuffer
  296 00000194         
  297 00000194 F101 0101       ADD              R1, #1      ;incrementing data 
                                                            pointer by 1
  298 00000198 6001            STR              R1, [R0]
  299 0000019A         
  300 0000019A 481E            LDR              R0, = TimeBuffer ;holds the add
                                                            ress of where the b
                                                            uffer is located
  301 0000019C 6803            LDR              R3, [R0]    ;R4 will hold the e
                                                            lapsed time
  302 0000019E 481F            LDR              R0, = TimePt
  303 000001A0 6806            LDR              R6, [R0]    ;R6 holds TimePt
  304 000001A2         
  305 000001A2 481F            LDR              R0, = NVIC_ST_CURRENT_R
  306 000001A4 6801            LDR              R1, [R0]    ;R1 holds the curre
                                                            nt time the timer
  307 000001A6 481F            LDR              R0, = LastTime
  308 000001A8 6805            LDR              R5, [R0]    ;will hold the prev
                                                            ious time to be sub
                                                            tracted from
  309 000001AA 1A6B            SUBS             R3, R5, R1
  310 000001AC F023 437F       AND              R3, #0x00FFFFFF
  311 000001B0 6033            STR              R3, [R6]    ;dumping elapsed ti



ARM Macro Assembler    Page 9 


                                                            me into time buffer
                                                            
  312 000001B2 F106 0604       ADD              R6, R6, #4  ;incrementing time 
                                                            pointer by 4
  313 000001B6 4605            MOV              R5, R0      ;makes the current 
                                                            time the previous t
                                                            ime
  314 000001B8         
  315 000001B8         Return
  316 000001B8         
  317 000001B8 BD7F            POP              {R0-R6,PC}
  318 000001BA         
  319 000001BA         ; edit the following only if you need to move pins from 
                       PA4, PE3-0      
  320 000001BA         ; logic analyzer on the real board
  321 000001BA 40004040 
                       PA4     equ              0x40004040
  322 000001BA 4002403C 
                       PE30    equ              0x4002403C
  323 000001BA 4000C000 
                       UART0_DR_R
                               equ              0x4000C000
  324 000001BA         SendDataToLogicAnalyzer
  325 000001BA 491B            LDR              R1,=PA4
  326 000001BC 6809            LDR              R1,[R1]     ; read PA4
  327 000001BE 481B            LDR              R0,=PE30    ; read PE3-PE0
  328 000001C0 6800            LDR              R0,[R0]
  329 000001C2 EA40 0001       ORR              R0,R0,R1    ;combine into one 5
                                                            -bit value
  330 000001C6 F040 0080       ORR              R0,R0,#0x80
  331 000001CA 4919            LDR              R1,=UART0_DR_R
  332 000001CC 6008            STR              R0,[R1]     ; send data at 10 k
                                                            Hz
  333 000001CE 4770            BX               LR
  334 000001D0         
  335 000001D0         
  336 000001D0                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  337 000001D0                 END                          ; end of file
              00000000 
              400FE608 
              40025400 
              4002551C 
              400253FC 
              400043FC 
              00000000 
              00186A00 
              00000000 
              40024400 
              4002451C 
              40004400 
              4000451C 
              00000000 
              400243FC 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 10 


              00000000 
              E000E018 
              00000000 
              40004040 
              4002403C 
              4000C000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\main.d -o.\main.o -I.\RTE\_Lab4 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\
5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Inclu
de\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526"
 --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\main.lst
 main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CNT 00000008

Symbol: CNT
   Definitions
      At line 48 in file main.s
   Uses
      None
Comment: CNT unused
DATA 00000000

Symbol: DATA
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 0000000C

Symbol: DataBuffer
   Definitions
      At line 49 in file main.s
   Uses
      At line 219 in file main.s
      At line 250 in file main.s
      At line 277 in file main.s

DataPt 000000D4

Symbol: DataPt
   Definitions
      At line 51 in file main.s
   Uses
      At line 247 in file main.s
      At line 275 in file main.s
      At line 292 in file main.s

Direction 00000004

Symbol: Direction
   Definitions
      At line 45 in file main.s
   Uses
      At line 131 in file main.s
      At line 146 in file main.s
      At line 197 in file main.s

Index 00000000

Symbol: Index
   Definitions
      At line 44 in file main.s
   Uses
      At line 149 in file main.s
      At line 195 in file main.s

LastTime 000000DC

Symbol: LastTime
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 53 in file main.s
   Uses
      At line 307 in file main.s
Comment: LastTime used once
TimeBuffer 00000070

Symbol: TimeBuffer
   Definitions
      At line 50 in file main.s
   Uses
      At line 235 in file main.s
      At line 257 in file main.s
      At line 270 in file main.s
      At line 300 in file main.s

TimePt 000000D8

Symbol: TimePt
   Definitions
      At line 52 in file main.s
   Uses
      At line 254 in file main.s
      At line 268 in file main.s
      At line 302 in file main.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file main.s
   Uses
      None
Comment: .text unused
Debug_Capture 0000015E

Symbol: Debug_Capture
   Definitions
      At line 265 in file main.s
   Uses
      At line 206 in file main.s
Comment: Debug_Capture used once
Debug_Init 00000102

Symbol: Debug_Init
   Definitions
      At line 214 in file main.s
   Uses
      At line 96 in file main.s
Comment: Debug_Init used once
EndofBuffer 00000004

Symbol: EndofBuffer
   Definitions
      At line 62 in file main.s
   Uses
      At line 220 in file main.s
Comment: EndofBuffer used once
ONLIGHT 0000004A

Symbol: ONLIGHT
   Definitions
      At line 103 in file main.s
   Uses
      None
Comment: ONLIGHT unused
Return 000001B8

Symbol: Return
   Definitions
      At line 315 in file main.s
   Uses
      At line 273 in file main.s
      At line 280 in file main.s

SendDataToLogicAnalyzer 000001BA

Symbol: SendDataToLogicAnalyzer
   Definitions
      At line 324 in file main.s
   Uses
      At line 68 in file main.s
Comment: SendDataToLogicAnalyzer used once
Start 00000008




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Start
   Definitions
      At line 65 in file main.s
   Uses
      At line 63 in file main.s
Comment: Start used once
Stepper 00000000

Symbol: Stepper
   Definitions
      At line 61 in file main.s
   Uses
      At line 202 in file main.s
Comment: Stepper used once
Stepper_Init 00000084

Symbol: Stepper_Init
   Definitions
      At line 144 in file main.s
   Uses
      At line 93 in file main.s
Comment: Stepper_Init used once
Stepper_Step 000000DC

Symbol: Stepper_Step
   Definitions
      At line 193 in file main.s
   Uses
      At line 139 in file main.s
Comment: Stepper_Step used once
Switch_Init 000000B8

Symbol: Switch_Init
   Definitions
      At line 170 in file main.s
   Uses
      At line 94 in file main.s
Comment: Switch_Init used once
Wait 000000FC

Symbol: Wait
   Definitions
      At line 209 in file main.s
   Uses
      At line 141 in file main.s
      At line 211 in file main.s

datainitloop 0000010E

Symbol: datainitloop
   Definitions
      At line 223 in file main.s
   Uses
      At line 231 in file main.s
Comment: datainitloop used once
loop 0000004A

Symbol: loop
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 101 in file main.s
   Uses
      At line 142 in file main.s
Comment: loop used once
no 00000076

Symbol: no
   Definitions
      At line 138 in file main.s
   Uses
      At line 127 in file main.s
      At line 129 in file main.s

ok 00000074

Symbol: ok
   Definitions
      At line 137 in file main.s
   Uses
      At line 135 in file main.s
Comment: ok used once
timeinitloop 00000128

Symbol: timeinitloop
   Definitions
      At line 237 in file main.s
   Uses
      At line 245 in file main.s
Comment: timeinitloop used once
18 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 123 in file main.s
      At line 282 in file main.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 184 in file main.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 179 in file main.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 204 in file main.s
      At line 286 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 164 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 159 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 104 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 88 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 83 in file main.s
Comment: GPIO_PORTF_DIR_R used once
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 305 in file main.s
Comment: NVIC_ST_CURRENT_R used once
PA4 40004040

Symbol: PA4
   Definitions
      At line 321 in file main.s
   Uses
      At line 325 in file main.s
Comment: PA4 used once
PE30 4002403C

Symbol: PE30
   Definitions
      At line 322 in file main.s
   Uses
      At line 327 in file main.s
Comment: PE30 used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 72 in file main.s
      At line 152 in file main.s
      At line 172 in file main.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 323 in file main.s
   Uses
      At line 331 in file main.s
Comment: UART0_DR_R used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 57 in file main.s
   Uses
      At line 261 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 56 in file main.s
   Uses
      At line 70 in file main.s
Comment: TExaS_Init used once
2 symbols
379 symbols in table
